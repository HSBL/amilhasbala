{"remainingRequest":"/Users/amilhasbala/Documents/GitHub/amilhasbala/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/amilhasbala/Documents/GitHub/amilhasbala/node_modules/vue-videobg/src/VideoBackground.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/amilhasbala/Documents/GitHub/amilhasbala/node_modules/vue-videobg/src/VideoBackground.vue","mtime":1494007440000},{"path":"/Users/amilhasbala/Documents/GitHub/amilhasbala/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amilhasbala/Documents/GitHub/amilhasbala/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/amilhasbala/Documents/GitHub/amilhasbala/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amilhasbala/Documents/GitHub/amilhasbala/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    sources: {\n      type: Array,\n      required: true\n    },\n    img: {\n      type: String\n    }\n  },\n\n  data () {\n    return {\n      videoRatio: null\n    }\n  },\n\n  mounted () {\n    this.setImageUrl()\n    this.setContainerHeight()\n\n    if (this.videoCanPlay()) {\n      this.$refs.video.oncanplay = () => {\n        if (!this.$refs.video) return\n\n        this.videoRatio = this.$refs.video.videoWidth / this.$refs.video.videoHeight\n        this.setVideoSize()\n        this.$refs.video.style.visibility = 'visible'\n      }\n    }\n\n    window.addEventListener('resize', this.resize)\n  },\n\n  beforeDestroy () {\n    window.removeEventListener('resize', this.resize)\n  },\n\n  methods: {\n    resize () {\n      this.setContainerHeight()\n\n      if (this.videoCanPlay()) {\n        this.setVideoSize()\n      }\n    },\n\n    videoCanPlay () {\n      return !!this.$refs.video.canPlayType\n    },\n\n    setImageUrl () {\n      if (this.img) {\n        this.$el.style.backgroundImage = `url(${this.img})`\n      }\n    },\n\n    setContainerHeight () {\n      this.$el.style.height = `${window.innerHeight}px`\n    },\n\n    setVideoSize () {\n      var width, height, containerRatio = this.$el.offsetWidth / this.$el.offsetHeight\n\n      if (containerRatio > this.videoRatio) {\n        width = this.$el.offsetWidth\n      } else {\n        height = this.$el.offsetHeight\n      }\n\n      this.$refs.video.style.width = width ? `${width}px` : 'auto'\n      this.$refs.video.style.height = height ? `${height}px` : 'auto'\n    },\n\n    getMediaType (src) {\n      return 'video/' + src.split('.').pop()\n    }\n  }\n}\n",{"version":3,"sources":["VideoBackground.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"VideoBackground.vue","sourceRoot":"node_modules/vue-videobg/src","sourcesContent":["<template>\n  <section class=\"VideoBg\">\n    <video autoplay loop muted ref=\"video\">\n      <source v-for=\"source in sources\" :src=\"source\" :type=\"getMediaType(source)\">\n    </video>\n    <div class=\"VideoBg__content\">\n      <slot></slot>\n    </div>\n  </section>\n</template>\n\n\n<script>\n  export default {\n    props: {\n      sources: {\n        type: Array,\n        required: true\n      },\n      img: {\n        type: String\n      }\n    },\n\n    data () {\n      return {\n        videoRatio: null\n      }\n    },\n\n    mounted () {\n      this.setImageUrl()\n      this.setContainerHeight()\n\n      if (this.videoCanPlay()) {\n        this.$refs.video.oncanplay = () => {\n          if (!this.$refs.video) return\n\n          this.videoRatio = this.$refs.video.videoWidth / this.$refs.video.videoHeight\n          this.setVideoSize()\n          this.$refs.video.style.visibility = 'visible'\n        }\n      }\n\n      window.addEventListener('resize', this.resize)\n    },\n\n    beforeDestroy () {\n      window.removeEventListener('resize', this.resize)\n    },\n\n    methods: {\n      resize () {\n        this.setContainerHeight()\n\n        if (this.videoCanPlay()) {\n          this.setVideoSize()\n        }\n      },\n\n      videoCanPlay () {\n        return !!this.$refs.video.canPlayType\n      },\n\n      setImageUrl () {\n        if (this.img) {\n          this.$el.style.backgroundImage = `url(${this.img})`\n        }\n      },\n\n      setContainerHeight () {\n        this.$el.style.height = `${window.innerHeight}px`\n      },\n\n      setVideoSize () {\n        var width, height, containerRatio = this.$el.offsetWidth / this.$el.offsetHeight\n\n        if (containerRatio > this.videoRatio) {\n          width = this.$el.offsetWidth\n        } else {\n          height = this.$el.offsetHeight\n        }\n\n        this.$refs.video.style.width = width ? `${width}px` : 'auto'\n        this.$refs.video.style.height = height ? `${height}px` : 'auto'\n      },\n\n      getMediaType (src) {\n        return 'video/' + src.split('.').pop()\n      }\n    }\n  }\n</script>\n\n\n<style>\n  .VideoBg {\n    position: relative;\n    background-size: cover;\n    background-position: center;\n    overflow: hidden;\n  }\n\n  .VideoBg video {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    visibility: hidden;\n    transform: translate(-50%, -50%);\n  }\n\n  .VideoBg__content {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n</style>\n"]}]}